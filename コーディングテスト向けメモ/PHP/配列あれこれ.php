<?php////////////////////////////////////////////////////////////////?>
<?php
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
// "a b c" などの文字列の取得 1⃣
fscanf(STDIN,"%d %d %d",$a,$b,$c);
// "a b c" などの文字列の取得 2⃣
$input_0 = rtrim(fgets(STDIN));
$split_0 = explode(" ", $input_0);
$a = $split_0[0];
$b = $split_0[1];
$c = $split_0[2];
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
// N回ループしながら文字列取得 1⃣
for ($i=0; $i<$N; ++$i) {
  fscanf(STDIN,"%d %d %d",$a,$b,$c);
}
// N回ループしながら文字列取得 2⃣
for ($i=0; $i<$N; ++$i) {
  $input_1 = rtrim(fgets(STDIN));
  $split_1 = explode(" ", $input_1);
  $a = $split_1[0];
  $b = $split_1[1];
  $c = $split_1[2];
}
// 数える必要が無い場合の文字列取得
while ($input_line = trim(fgets(STDIN))) {
  $split_1 = explode(" ", $input_line);
  $a = $split_1[0];
  $b = $split_1[1];
  $c = $split_1[2];
  echo $a, ' ', $b, ' ', $c . PHP_EOL;
}
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
// N回ループ
for ($i=0; $i<$N; ++$i) {
}
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
// 配列のキーと値を入れ替える
$A = array(0=>2, 1=>0, 2=>1, 3=>9, 4=>7, 5=>4, 6=>3, 7=>6, 8=>5, 9=>8);
$B = array_flip($A);
print_r(join(" ", $A));
// 2 0 1 9 7 4 3 6 5 8\
echo "\n";
print_r(join(" ", $B));
// 1 2 0 6 5 8 7 4 9 3
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
/*
3
1 2 3
4 5 6
7 8 9
行列形式で取得する
*/
$N = rtrim(fgets(STDIN));
for ($i=0;$i<$N;++$i) {
  $input_1 = rtrim(fgets(STDIN));
  $split_1 = explode(" ", $input_1);
  for ($j=0;$j<count($split_1);++$j) {
    $Array[$i][$j] = $split_1[$j];
  }
}
//var_dump($Array);
// 行列を表ライクに表示
for ($i=0;$i<$N;++$i) {
  print(join(" ",$Array[$i]) . PHP_EOL);
}
/*
// 出力結果 //
1 2 3
4 5 6
7 8 9
*/
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
//// 配列に要素を追加する(pushとおなじ)
$A = [];
$A[] = 'Huga';
$A[] = 'huga';
$A[] = 'ireba!!!';
print_r($A);
echo implode(" ", $A);
/*
Array
(
    [0] => Huga
    [1] => huga
    [2] => ireba!!!
)
Huga huga ireba!!!
*/
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
// 連想配列でのforeachの適用
function odd($v) {
  return $v % 2 === 1;
}

$A = array('a'=>1, 'b'=>2, 'c'=>3, 'd'=>4, 'e'=>5, 'f'=>6);
foreach ($A as $key=>$v) {
  if (odd($v)) {
    $C[$key] = $v;
  }
}
print_r($C);
/*
Array
(
    [a] => 1
    [c] => 3
    [e] => 5
)
*/
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
//// 配列をソートする
$a = array('b', 'C', 10, 'c', 'B', 100, 'a', 100, 'A', 0);
array_multisort($a);
echo join(',', $a) . PHP_EOL;
//// オプションを付けてソートする(昇順, String昇順)
$b = array('b', 'C', 10, 'c', 'B', 100, 'a', 100, 'A', 0);
array_multisort($b, SORT_ASC, SORT_STRING);
echo join(',', $b) . PHP_EOL;
array_multisort($b, SORT_DESC, SORT_STRING);
echo join(',', $b) . PHP_EOL;
/*
A,B,C,a,b,c,0,10,100,100
0,10,100,100,A,B,C,a,b,c
c,b,a,C,B,A,100,100,10,0
*/
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
//// 連想配列をキーでソートする
$array = [
  ['born_in'=>'95784', 'name'=>'GOD'],
  ['born_in'=>'1995', 'name'=>'bot'],
  ['born_in'=>'1295', 'name'=>'gone'],
  ['born_in'=>'5295', 'name'=>'G-473']
];
array_multisort(array_column($array, 'born_in'), SORT_ASC, $array);
var_dump($array);
/*
array(4) {
  [0]=>
  array(2) {
    ["born_in"]=>
    string(4) "1295"
    ["name"]=>
    string(4) "gone"
  }
  [1]=>
  array(2) {
    ["born_in"]=>
    string(4) "1995"
    ["name"]=>
    string(3) "bot"
  }
  [2]=>
  array(2) {
    ["born_in"]=>
    string(4) "5295"
    ["name"]=>
    string(5) "G-473"
  }
  [3]=>
  array(2) {
    ["born_in"]=>
    string(5) "95784"
    ["name"]=>
    string(3) "GOD"
  }
}
*/
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
?>
<?php////////////////////////////////////////////////////////////////?>
<?php
?>
<?php////////////////////////////////////////////////////////////////?>